// title:  conways game of life practice
// author: gav
// desc:   messy conways game of life
// script: js

// var win_w = 240;
// var win_h = 136; // len 32640

var current = new Uint8Array(32640);
for(var i = 0; i < 32640; i++){
	if(Math.random() > 0.4){
		current[i] = 1
	} else{
		current[i] = 0
	}
}

// no idea why but 'this' works and is in fact faster ???
function cellNeighbors(arr, i){
	// var x = i%240, y = i/240;
	// check inside
	var population = 0;
		population+= arr[i - 239];	//  top left
		population+= arr[i - 240];		//  top mid
		population+= arr[i - 241];	//  top right
		population+= arr[i - 1];		//  mid left
		// skip centre
		population+= arr[i + 1];		//  mid right
		population+= arr[i + 239];	//  bottom left
		population+= arr[i + 240];		//  bottom mid
		population+= arr[i + 241];	//  bottom right
		return population;
}

function TIC()
{
	var neighbours,
		i,
		next;
	cls(0); // clear whole screen
	next = new Uint8Array(240 * 136); // all other cells are 0
	for(i = 0; i < 32640; i++){
		neighbours = cellNeighbors(current,i); // this is faster as a function call
		if(neighbours > 1 && neighbours < 4 && current[i]===1){
			next[i] = 1; // Any live cell with two or three live neighbours survives.
			poke4(i,12); // write to screen ram (conveniently starts at 0!)
		}else if(neighbours === 3){
			next[i] = 1; // Any dead cell with three live neighbours becomes a live cell.
			poke4(i,12); // write to screen ram (conveniently starts at 0!)
		}
	}
	current = next;
}

// <MAP>
// 016:021200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
// </MAP>

// <WAVES>
// 000:00000000ffffffff00000000ffffffff
// 001:0123456789abcdeffedcba9876543210
// 002:0123456789abcdef0123456789abcdef
// </WAVES>

// <SFX>
// 000:000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000304000000000
// </SFX>

// <PALETTE>
// 000:1a1c2c5d275db13e53ef7d57ffcd75a7f07038b76425717929366f3b5dc941a6f673eff7f4f4f494b0c2566c86333c57
// </PALETTE>

// <COVER>
// 000:c26000007494648393160f008800070000c2000000000f00880018a1c1c24f4f4f00000000000020ff48f89abcdef03ac94badb837c01827d0680c7e094a88e98ea89a09ad1b95cf2dc893ac0ab22fab1eb9dfc2d1bda28a1e8178213d2958cbc35a3dd4e8978a245b98865cbf303674cd749353ebe99c9e1b8bdc6831bd549b9de8fbda3f6fd7a7de7c7283848801873657858b8c8b1a875f704d839d3f874f8694499d2b0b9f5e9520a94182a49d909295a536aa3a406eaca16d9aa1bd7f98a5b942923f69bc476a48bebf5d4453c34551c5c2c7c31139cbbdc48ac7aec1d2da9f238db58540ae74b0743561e65cc8cbad5fc975ef70bd595cd747ee10c4f93f4fee8d0b7de85639f2e90af66f29d29f057c9143c6044c8eb9517ea92c21c84b8f097adcf9cab7ff9522ae108c151cab35a1b7033482ac216c013ee757498a78f59cd1578702443315d044334a642ab45f0916eca6123cc8b084e41dcc698276a741830b1afa29b2d38a90a8c6a45d41b558ac4aa0f6857d44e5975bc62e4bfc1d2b561653544545a9f477743da12bb01312ebc7879e4f592f39d97384769da4557f754613a5365715332981a0cc64082ea2c8c46c59ed6cdd62754b61ac0b56e9497ea86e7e95ec7b1d7736a0e3d467b17ecaa6133b3ea0f8b05bf8f9163bd7c821e2541958bbdee543bd03c83c3c377a24e9ad8686fd0a3ed3b0e4cfaa1a8ebd0f42717a19f204867cd4b068c6bb99ed654ad3fd47e4d17acd61a2b17a7bedaf6fd777e8792004ae706dd26cdc7ca9a3071031edb1be163b06e2fd926998545e438e68d71fdd12c5484fcb21616871e78f4d67c2518d127702a925a8b002d88b34987ad175b0c8ffce1984dde79d1b4780582d1a8f0e57d09d89fd8283e98fa58504e4760a074f519536d4771a7cac54de8e84396574a94a4237f2a55b656344e09f5ab8e1265adc9309589a8998b3a8365969a6688f25c90e5f6edd594cd1443a8827af5a6dc090236728c88a529862b7f02a94592867ec120289eddd629d68786691bd5685ef5d7159b4e3a44154e323af6ab6c96d0e986acbcf3d9ac485ee5b82d44068af9c5705e0a665baea2c956af3b99f53baf9f92a56bae20aaea9728a1899a886555cdc88a2cad2e23b7a27a12c6bca589a637eca387985add5445759a635579de98bc596e62053790a6d4976edf639a8ae098959c9b27aa25edb4fe64a0d6588cee9ff6bd2b47d42711e381273949c73ea010f51a8a9e6619e928aab4fa05d060be1eda96622dea198794c73a01617d308e995074b3e1451bc6c2e2f9e581c903134be6c6565824a27e96d340fc300b19a76fc8fdf37058cba2da913451e40a4e8e4b8526df26b5720b08d06f47993b02595d3c2c6f4991065c6a3ef20db890c25f640ec16a49d3fce39efea6d531d196ebecad410d82a5b97fe1fc96b48ffe9cde11a682167da8cdbc3662394b54b207b7d1460c8a4d782baa8fe461ee6bfaa6b99da855a5711f37e3387742c8b33f1aeabc34178d97f9c0ee577ad2543741c4f4e17c97f53d47478fe19c9961d703d70e42e4a625e419c31f59dbb0b41bd92cff8a58b33c2a3fd18b74d2bcbbf8b4848fe96bf98dfe43c7bd2116200292d77ac691f59db36975799aa3fccbb15368240daf26b5f4b17b0f7ac7bb0d5ffbcbf2fa2d7ef1527f09b93d3ecf7ada3a5d5a634049f93ae218eb3c98ac66eff5220a7b6e7393b91ef6a2cf950e08428c041bc6d8385b35d4ce63871c6b0003d1a04581701e64b3589af6a2b988dd7e204dc24c8df893bb33e9a7823f1961ac6e94ab948590937d91a49758c4b8326490d781817a9fae154c24d9e03647abd1e909d71ebe0251bd2a5b3f0803278f362afde87f5466d4f8573647f9a44f796c964a4608bd10f9a601100a61db1fa886943d858f6ed81bd2aee6d1150dfc066868c49cd075bea215050f494ca2a09286c8adf47c6c6a63d0a6ee971daef1dda57bf38f920386fe88e1adc38efbbdd042128acb050b89692cf15c1819e64740976a645368076433884a5edc20820ca56b9c18523dedf2d693443900aa25f13c896d71706a835624a62669451a901718ca65a80da88c19745c0f856cd8040939ddc07a325c99cab36623093fa46293543a51d4aac691bcb57e13aa79527857d4a42f4e359f0c902301948459761656f3ed48d9d2e309a5f2481657ab8d8c1a5e35a593284e3472af3820000b3
// </COVER>

